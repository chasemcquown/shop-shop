{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kmcqu\\\\Desktop\\\\shop-shop\\\\client\\\\src\\\\utils\\\\GlobalState.js\";\n// NOTE: createContext will be used to instantiate a new Context object. The more meaningful term we can use here is that we're using it to create the container to hold our global state data and functionality so we can provide it throughout our app!\n// NOTE: useContext is another React Hook that will allow us to use the state created from the createContext function\nimport React, { createContext, useContext } from 'react';\nimport { useProductReducer } from './reducers';\nconst StoreContext = createContext(); // NOTE: the Provider is a special type of React component that we wrap our application in so it can make the state data that's passed into it as a prop available to all other components\n\nconst {\n  Provider\n} = StoreContext; // the following StoreProvider function will instantiate our initial global state with the useProductReducer() function we created earlier. SInce this function wraps around the useReducer hook, we receive two items in return: state which is the most up to date version of our global state object, and dispatch which is the method we execute to update our state. It is specifically going to look for an action object  passed in as its argument\n\nconst StoreProvider = ({\n  value = [],\n  ...props\n}) => {\n  const [state, dispatch] = useProductReducer({\n    products: [],\n    categories: [],\n    currentCategory: ''\n  }); // use this to confirm it works!\n\n  console.log(state);\n  return /*#__PURE__*/React.createElement(Provider, Object.assign({\n    value: [state, dispatch]\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }\n  }));\n};\n\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n}; // export both functions to use them elsewhere!\n\n\nexport { StoreProvider, useStoreContext };","map":{"version":3,"sources":["C:/Users/kmcqu/Desktop/shop-shop/client/src/utils/GlobalState.js"],"names":["React","createContext","useContext","useProductReducer","StoreContext","Provider","StoreProvider","value","props","state","dispatch","products","categories","currentCategory","console","log","useStoreContext"],"mappings":";AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,SAASC,iBAAT,QAAkC,YAAlC;AAEA,MAAMC,YAAY,GAAGH,aAAa,EAAlC,C,CACA;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAeD,YAArB,C,CAEA;;AACA,MAAME,aAAa,GAAG,CAAC;AAAEC,EAAAA,KAAK,GAAG,EAAV;AAAc,KAAGC;AAAjB,CAAD,KAA8B;AAChD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,iBAAiB,CAAC;AACxCQ,IAAAA,QAAQ,EAAE,EAD8B;AAExCC,IAAAA,UAAU,EAAE,EAF4B;AAGxCC,IAAAA,eAAe,EAAE;AAHuB,GAAD,CAA3C,CADgD,CAMhD;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACA,sBAAO,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE,CAACA,KAAD,EAAQC,QAAR;AAAjB,KAAwCF,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACH,CATD;;AAWA,MAAMQ,eAAe,GAAG,MAAM;AAC1B,SAAOd,UAAU,CAACE,YAAD,CAAjB;AACH,CAFD,C,CAIA;;;AACA,SAASE,aAAT,EAAwBU,eAAxB","sourcesContent":["\r\n// NOTE: createContext will be used to instantiate a new Context object. The more meaningful term we can use here is that we're using it to create the container to hold our global state data and functionality so we can provide it throughout our app!\r\n// NOTE: useContext is another React Hook that will allow us to use the state created from the createContext function\r\nimport React, { createContext, useContext } from 'react';\r\nimport { useProductReducer } from './reducers';\r\n\r\nconst StoreContext = createContext();\r\n// NOTE: the Provider is a special type of React component that we wrap our application in so it can make the state data that's passed into it as a prop available to all other components\r\nconst { Provider } = StoreContext;\r\n\r\n// the following StoreProvider function will instantiate our initial global state with the useProductReducer() function we created earlier. SInce this function wraps around the useReducer hook, we receive two items in return: state which is the most up to date version of our global state object, and dispatch which is the method we execute to update our state. It is specifically going to look for an action object  passed in as its argument\r\nconst StoreProvider = ({ value = [], ...props }) => {\r\n    const [state, dispatch] = useProductReducer({\r\n        products: [],\r\n        categories: [],\r\n        currentCategory: '',\r\n    });\r\n    // use this to confirm it works!\r\n    console.log(state)\r\n    return <Provider value={[state, dispatch]} {...props} />\r\n};\r\n\r\nconst useStoreContext = () => {\r\n    return useContext(StoreContext)\r\n};\r\n\r\n// export both functions to use them elsewhere!\r\nexport { StoreProvider, useStoreContext };"]},"metadata":{},"sourceType":"module"}